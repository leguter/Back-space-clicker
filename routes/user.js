// const express = require("express");
// const db = require("../db");
// const authMiddleware = require("../middleware/auth");

// const router = express.Router();
// router.use(authMiddleware);

// // ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// router.get("/me", async (req, res) => {
//   try {
//     const { telegramId } = req.user;
//     const userResult = await db.query(
//       "SELECT telegram_id, first_name, username, balance, tap_power FROM users WHERE telegram_id = $1",
//       [telegramId]
//     );

//     if (userResult.rows.length === 0) {
//       return res.status(404).json({ message: "User not found" });
//     }

//     res.json(userResult.rows[0]);
//   } catch (error) {
//     console.error("User fetch error:", error);
//     res.status(500).json({ message: "Server error" });
//   }
// });

// // ‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (tap)
// router.post("/tap", async (req, res) => {
//   try {
//     const { telegramId } = req.user;

//     // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å–∏–ª—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//     const userResult = await db.query(
//       "SELECT tap_power FROM users WHERE telegram_id = $1",
//       [telegramId]
//     );

//     if (userResult.rows.length === 0) {
//       return res.status(404).json({ message: "User not found" });
//     }

//     const tapPower = userResult.rows[0].tap_power || 1;

//     // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —ñ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º tapPower
//     const result = await db.query(
//       "UPDATE users SET balance = balance + $2 WHERE telegram_id = $1 RETURNING balance",
//       [telegramId, tapPower]
//     );

//     res.json({
//       newBalance: result.rows[0].balance,
//       added: tapPower, // —Å–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞–ª–æ—Å—å
//     });
//   } catch (error) {
//     console.error("Tap error:", error);
//     res.status(500).json({ message: "Server error during tap" });
//   }
// });

// module.exports = router;
// user.js

const express = require("express");
const db = require("../db");
const authMiddleware = require("../middleware/auth");
const axios = require("axios"); // üëà –î–æ–¥–∞–π—Ç–µ axios

const router = express.Router();
router.use(authMiddleware);

// ... (–≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –¥–ª—è /me —Ç–∞ /tap)

// ‚úÖ –ù–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É
router.post("/claim/subscription", async (req, res) => {
  const { telegramId } = req.user;
  const taskId = "follow_channel"; // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è

  try {
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤–∏–∫–æ–Ω–∞–≤ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    const existingTask = await db.query(
      "SELECT * FROM user_tasks WHERE user_telegram_id = $1 AND task_id = $2",
      [telegramId, taskId]
    );

    if (existingTask.rows.length > 0) {
      return res.status(409).json({ message: "Reward already claimed." }); // 409 Conflict
    }

    // 2. –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ Telegram API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const channelId = process.env.TELEGRAM_CHANNEL_ID;
    const apiUrl = `https://api.telegram.org/bot${botToken}/getChatMember?chat_id=${channelId}&user_id=${telegramId}`;

    const response = await axios.get(apiUrl);
    const memberStatus = response.data.result.status;

    // –°—Ç–∞—Ç—É—Å–∏, —è–∫—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–∞–Ω–∞–ª—ñ
    const isMember = ["member", "administrator", "creator"].includes(memberStatus);

    if (!isMember) {
      return res.status(403).json({ message: "You are not a member of the channel." }); // 403 Forbidden
    }

    // 3. –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ —î - –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥–∏
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
    const client = await db.connect();
    try {
      await client.query("BEGIN");

      // –ü–æ–¥–≤–æ—é—î–º–æ tap_power —Ç–∞ –¥–æ–¥–∞—î–º–æ 2 –∫–≤–∏—Ç–∫–∏
      const updateUserQuery = `
        UPDATE users
        SET
          tap_power = tap_power * 2,
          tickets = tickets + 2
        WHERE telegram_id = $1
        RETURNING tap_power, tickets;
      `;
      const updatedUser = await client.query(updateUserQuery, [telegramId]);

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
      const insertTaskQuery = `
        INSERT INTO user_tasks (user_telegram_id, task_id)
        VALUES ($1, $2);
      `;
      await client.query(insertTaskQuery, [telegramId, taskId]);

      await client.query("COMMIT");

      res.json({
        message: "Reward claimed successfully!",
        newTapPower: updatedUser.rows[0].tap_power,
        newTickets: updatedUser.rows[0].tickets,
      });
    } catch (e) {
      await client.query("ROLLBACK");
      throw e;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Subscription claim error:", error.response ? error.response.data : error.message);
    res.status(500).json({ message: "Server error during claim process" });
  }
});


module.exports = router;
