// const express = require("express");
// const db = require("../db");
// const authMiddleware = require("../middleware/auth");
// const axios = require("axios");

// const router = express.Router();
// router.use(authMiddleware);

// // ===============================================================
// // üßæ POST /api/wheel/create_invoice
// // (–¶–µ–π —Ä–æ—É—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
// // ===============================================================
// router.post("/create_invoice", async (req, res) => {
//   try {
//     const { telegramId } = req.user;
//     const spinPrice = 10; // 1 XTR

//     const botToken = process.env.BOT_TOKEN;

//     const response = await axios.post(
//       `https://api.telegram.org/bot${botToken}/createInvoiceLink`,
//       {
//         title: "Wheel of Fortune Spin",
//         description: "Spin the wheel for awesome rewards!",
//         payload: `wheel_spin_${telegramId}_${Date.now()}`,
//         provider_token: "",
//         currency: "XTR",
//         prices: [{ label: "Spin Cost", amount: spinPrice }],
//       }
//     );

//     if (response.data && response.data.ok && response.data.result) {
//       res.json({ success: true, invoice_link: response.data.result });
//     } else {
//       throw new Error("Failed to get invoice link from Telegram API");
//     }
//   } catch (err) {
//     console.error(
//       "Create wheel invoice error:",
//       err.response?.data || err.message
//     );
//     res.status(500).json({ success: false, message: "Failed to create invoice" });
//   }
// });

// // ===============================================================
// // üé° POST /api/wheel/spin
// // (–û–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —à–∞–Ω—Å—ñ–≤)
// // ===============================================================
// router.post("/spin", async (req, res) => {
//   try {
//     const { telegramId } = req.user;

//     const roll = Math.random() * 100; // –†–æ–∑—ñ–≥—Ä–∞—à –≤—ñ–¥ 0 –¥–æ 99.99
//     let reward;

//     // ‚ùóÔ∏è –û–°–¨ –¢–£–¢ –í–ê–®–Ü –ù–û–í–Ü –®–ê–ù–°–ò:

//     // 80% Ticket (–¥—ñ–∞–ø–∞–∑–æ–Ω 0 - 79.99)
//     if (roll < 80) {
//       reward = { type: "raffle_ticket", value: 1 };
//       await db.query(
//         "UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 18% Boost (–¥—ñ–∞–ø–∞–∑–æ–Ω 80 - 97.99)
//     else if (roll < 98) { // (80 + 18 = 98)
//       reward = { type: "boost", value: "x2 Clicks" };
//       await db.query(
//         "UPDATE users SET tap_power = tap_power +2 2 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 1% Stars (–¥—ñ–∞–ø–∞–∑–æ–Ω 98 - 98.99)
//     else if (roll < 99) { // (98 + 1 = 99)
//       reward = { type: "stars", value: 5 };
//       await db.query(
//         "UPDATE users SET balance = balance + 5 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 1% NFT (–¥—ñ–∞–ø–∞–∑–æ–Ω 99 - 99.99)
//     else {
//       reward = { type: "nft", value: "Mystery Box" };
//       // ... (–ª–æ–≥—ñ–∫–∞ NFT, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
//     }

//     // –ó–∞–ø–∏—Å—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø—ñ–Ω—É
//     await db.query(
//       `INSERT INTO user_spins (user_id, reward_type, reward_value)
//        VALUES ($1, $2, $3)`,
//       [telegramId, reward.type, reward.value.toString()]
//     );

//     // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ tap_power
//     const updatedUser = await db.query(
//       "SELECT balance, tickets, tap_power FROM users WHERE telegram_id = $1",
//       [telegramId]
//     );

//     if (updatedUser.rows.length === 0) {
//       console.error(`User not found with telegramId ${telegramId} after spin`);
//       return res.status(404).json({ success: false, message: "User not found after spin" });
//     }

//     res.json({
//       success: true,
//       result: reward, // 'result' —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–æ–º—É, —â–æ —Å—Ç–∞–ª–æ—Å—è
//       balance: updatedUser.rows[0].balance,
//       tickets: updatedUser.rows[0].tickets,
//       tap_power: updatedUser.rows[0].tap_power,
//     });
//   } catch (err) {
//     console.error("Wheel spin error:", err);
//     res.status(500).json({ success: false, message: "Server error" });
//   }
// });

// module.exports = router;
const express = require("express");
const db = require("../db");
const authMiddleware = require("../middleware/auth");
const axios = require("axios");

const router = express.Router();
router.use(authMiddleware);

// ===============================================================
// üßæ POST /api/wheel/create_invoice (–ë–µ–∑ –∑–º—ñ–Ω)
// ===============================================================
router.post("/create_invoice", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const spinPrice = 10; // 10 XTR

    const botToken = process.env.BOT_TOKEN;

    const response = await axios.post(
      `https://api.telegram.org/bot${botToken}/createInvoiceLink`,
      {
        title: "Wheel of Fortune Spin",
        description: "Spin the wheel for awesome rewards!",
        payload: `wheel_spin_${telegramId}_${Date.now()}`,
        currency: "XTR",
        prices: [{ label: "Spin Cost", amount: spinPrice }],
      }
    );

    if (response.data && response.data.ok && response.data.result) {
      res.json({ success: true, invoice_link: response.data.result });
    } else {
      throw new Error("Failed to get invoice link from Telegram API");
    }
  } catch (err) {
    console.error("Create wheel invoice error:", err.response?.data || err.message);
    res.status(500).json({ success: false, message: "Failed to create invoice" });
  }
});

// ===============================================================
// üé° POST /api/wheel/spin (–ü–ª–∞—Ç–Ω–∏–π —Å–ø—ñ–Ω - –±–µ–∑ –∑–º—ñ–Ω, –≤—ñ–Ω –ø—Ä–∞—Ü—é–≤–∞–≤)
// ===============================================================
router.post("/spin", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const spinCost = 10;

    const userCheck = await db.query(
      "SELECT internal_stars FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (!userCheck.rows[0]) return res.status(404).json({ success: false, message: "User not found" });

    const currentStars = parseInt(userCheck.rows[0].internal_stars, 10);
    if (currentStars < spinCost) return res.json({ success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫" });

    await db.query(
      "UPDATE users SET internal_stars = internal_stars - $1 WHERE telegram_id = $2",
      [spinCost, telegramId]
    );

    // --- –õ–æ–≥—ñ–∫–∞ –†–æ–∑—ñ–≥—Ä–∞—à—É ---
    const roll = Math.random() * 100;
    let reward;

    if (roll < 80) {
      reward = { type: "raffle_ticket", value: 1 };
      await db.query("UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 98) {
      reward = { type: "boost", value: "x2 Clicks" };
      await db.query("UPDATE users SET tap_power = tap_power + 2 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 99) {
      reward = { type: "stars", value: 5 };
      await db.query("UPDATE users SET internal_stars = internal_stars + 5 WHERE telegram_id = $1", [telegramId]);
    } else {
      reward = { type: "nft", value: "Mystery Box" };
    }

    await db.query(
      `INSERT INTO user_spins (user_id, reward_type, reward_value)
       VALUES ($1, $2, $3)`,
      [telegramId, reward.type, reward.value.toString()]
    );
    // --- –ö—ñ–Ω–µ—Ü—å –õ–æ–≥—ñ–∫–∏ –†–æ–∑—ñ–≥—Ä–∞—à—É ---

    const updatedUser = await db.query(
      "SELECT balance, tickets, tap_power, internal_stars FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    res.json({
      success: true,
      result: reward, // <-- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∏–∑
      balance: updatedUser.rows[0].balance,
      tickets: updatedUser.rows[0].tickets,
      tap_power: updatedUser.rows[0].tap_power,
      new_internal_stars: updatedUser.rows[0].internal_stars,
    });
  } catch (err) {
    console.error("Wheel spin error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ===============================================================
// üü¢ GET /api/wheel/referral_status (–ë–µ–∑ –∑–º—ñ–Ω)
// ===============================================================
router.get("/referral_status", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const user = await db.query(
      "SELECT referral_spins FROM users WHERE telegram_id = $1",
      [telegramId]
    );
    if (!user.rows[0]) return res.status(404).json({ success: false, message: "User not found" });
    res.json({ success: true, referral_spins: user.rows[0].referral_spins });
  } catch (err) {
    console.error("Referral status error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ===============================================================
// üü¢ POST /api/wheel/referral_spin (‚ùóÔ∏è –ó–ú–Ü–ù–ï–ù–û)
// ===============================================================
router.post("/referral_spin", async (req, res) => {
  try {
    const { telegramId } = req.user;

    const userCheck = await db.query(
      "SELECT referral_spins FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (!userCheck.rows[0]) return res.status(404).json({ success: false, message: "User not found" });

    const spins = parseInt(userCheck.rows[0].referral_spins, 10);
    if (spins <= 0) return res.json({ success: false, message: "No referral spins left" });

    // –ó–º–µ–Ω—à—É—î–º–æ –Ω–∞ 1
    await db.query(
      "UPDATE users SET referral_spins = referral_spins - 1 WHERE telegram_id = $1",
      [telegramId]
    );

    // ‚ùóÔ∏è –î–æ–¥–∞–Ω–æ –ª–æ–≥—ñ–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É, —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—É –∑ /spin
    const roll = Math.random() * 100;
    let reward;

    if (roll < 80) {
      reward = { type: "raffle_ticket", value: 1 };
      await db.query("UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 98) {
      reward = { type: "boost", value: "x2 Clicks" };
      await db.query("UPDATE users SET tap_power = tap_power + 2 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 99) {
      reward = { type: "stars", value: 5 };
      await db.query("UPDATE users SET internal_stars = internal_stars + 5 WHERE telegram_id = $1", [telegramId]);
    } else {
      reward = { type: "nft", value: "Mystery Box" };
    }

    await db.query(
      `INSERT INTO user_spins (user_id, reward_type, reward_value)
       VALUES ($1, $2, $3)`,
      [telegramId, reward.type, reward.value.toString()]
    );
    // ‚ùóÔ∏è –ö—ñ–Ω–µ—Ü—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏

    // ‚ùóÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
    const updatedUser = await db.query(
      "SELECT balance, tickets, tap_power, internal_stars, referral_spins FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    res.json({
      success: true,
      result: reward, // <-- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∏–∑
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, —è–∫—ñ –º–æ–≥–ª–∏ –∑–º—ñ–Ω–∏—Ç–∏—Å—å
      balance: updatedUser.rows[0].balance,
      tickets: updatedUser.rows[0].tickets,
      tap_power: updatedUser.rows[0].tap_power,
      new_internal_stars: updatedUser.rows[0].internal_stars,
      referral_spins: updatedUser.rows[0].referral_spins,
    });

  } catch (err) {
    console.error("Referral spin error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ===============================================================
// üü¢ GET /api/wheel/daily_status (‚ùóÔ∏è –ó–ú–Ü–ù–ï–ù–û)
// ===============================================================
router.get("/daily_status", async (req, res) => {
  try {
    const { telegramId } = req.user;

    const user = await db.query(
      "SELECT last_daily_spin FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (!user.rows[0]) return res.status(404).json({ success: false, message: "User not found" });

    const lastSpin = user.rows[0].last_daily_spin;
    const now = new Date();
    let available = true;
    let nextSpinTime = null;

    // ‚ùóÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø—ñ–Ω—É
    if (lastSpin) {
      const lastSpinDate = new Date(lastSpin);
      const timeDiffMs = now.getTime() - lastSpinDate.getTime();
      const hoursPassed = timeDiffMs / 1000 / 60 / 60;

      if (hoursPassed < 24) {
        available = false;
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø—ñ–Ω—É —Ä—ñ–≤–Ω–æ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ
        nextSpinTime = new Date(lastSpinDate.getTime() + 24 * 60 * 60 * 1000);
      }
    }

    res.json({
      success: true,
      daily_available: available,
      next_spin_time: nextSpinTime ? nextSpinTime.toISOString() : null, // <-- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å
    });

  } catch (err) {
    console.error("Daily status error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ===============================================================
// üü¢ POST /api/wheel/daily_spin (‚ùóÔ∏è –ó–ú–Ü–ù–ï–ù–û)
// ===============================================================
router.post("/daily_spin", async (req, res) => {
  try {
    const { telegramId } = req.user;

    const userCheck = await db.query(
      "SELECT last_daily_spin FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (!userCheck.rows[0]) return res.status(404).json({ success: false, message: "User not found" });

    const lastSpin = userCheck.rows[0].last_daily_spin;
    const now = new Date(); // –í–∏–∑–Ω–∞—á–∞—î–º–æ 'now' —Ç—É—Ç
    if (lastSpin) {
      const timeDiffMs = now.getTime() - new Date(lastSpin).getTime();
      if (timeDiffMs / 1000 / 60 / 60 < 24) {
        return res.json({ success: false, message: "Daily spin not available yet" });
      }
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø—ñ–Ω—É –Ω–∞ 'now'
    await db.query(
      "UPDATE users SET last_daily_spin = $1 WHERE telegram_id = $2",
      [now, telegramId]
    );

    // ‚ùóÔ∏è –î–æ–¥–∞–Ω–æ –ª–æ–≥—ñ–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    const roll = Math.random() * 100;
    let reward;

    if (roll < 80) {
      reward = { type: "raffle_ticket", value: 1 };
      await db.query("UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 98) {
      reward = { type: "boost", value: "x2 Clicks" };
      await db.query("UPDATE users SET tap_power = tap_power + 2 WHERE telegram_id = $1", [telegramId]);
    } else if (roll < 99) {
      reward = { type: "stars", value: 5 };
      await db.query("UPDATE users SET internal_stars = internal_stars + 5 WHERE telegram_id = $1", [telegramId]);
    } else {
      reward = { type: "nft", value: "Mystery Box" };
    }

    await db.query(
      `INSERT INTO user_spins (user_id, reward_type, reward_value)
       VALUES ($1, $2, $3)`,
      [telegramId, reward.type, reward.value.toString()]
    );
    // ‚ùóÔ∏è –ö—ñ–Ω–µ—Ü—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ—ó –ª–æ–≥—ñ–∫–∏

    // ‚ùóÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ + —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø—ñ–Ω—É
    const nextSpinTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    const updatedUser = await db.query(
      "SELECT balance, tickets, tap_power, internal_stars FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    res.json({
      success: true,
      result: reward, // <-- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∏–∑
      next_spin_time: nextSpinTime.toISOString(), // <-- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, —è–∫—ñ –º–æ–≥–ª–∏ –∑–º—ñ–Ω–∏—Ç–∏—Å—å
      balance: updatedUser.rows[0].balance,
      tickets: updatedUser.rows[0].tickets,
      tap_power: updatedUser.rows[0].tap_power,
      new_internal_stars: updatedUser.rows[0].internal_stars,
    });

  } catch (err) {
    console.error("Daily spin error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

module.exports = router;
