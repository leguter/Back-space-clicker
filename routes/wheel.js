// const express = require("express");
// const db = require("../db");
// const authMiddleware = require("../middleware/auth");
// const axios = require("axios");

// const router = express.Router();
// router.use(authMiddleware);

// // ===============================================================
// // üßæ POST /api/wheel/create_invoice
// // (–¶–µ–π —Ä–æ—É—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
// // ===============================================================
// router.post("/create_invoice", async (req, res) => {
//   try {
//     const { telegramId } = req.user;
//     const spinPrice = 10; // 1 XTR

//     const botToken = process.env.BOT_TOKEN;

//     const response = await axios.post(
//       `https://api.telegram.org/bot${botToken}/createInvoiceLink`,
//       {
//         title: "Wheel of Fortune Spin",
//         description: "Spin the wheel for awesome rewards!",
//         payload: `wheel_spin_${telegramId}_${Date.now()}`,
//         provider_token: "",
//         currency: "XTR",
//         prices: [{ label: "Spin Cost", amount: spinPrice }],
//       }
//     );

//     if (response.data && response.data.ok && response.data.result) {
//       res.json({ success: true, invoice_link: response.data.result });
//     } else {
//       throw new Error("Failed to get invoice link from Telegram API");
//     }
//   } catch (err) {
//     console.error(
//       "Create wheel invoice error:",
//       err.response?.data || err.message
//     );
//     res.status(500).json({ success: false, message: "Failed to create invoice" });
//   }
// });

// // ===============================================================
// // üé° POST /api/wheel/spin
// // (–û–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —à–∞–Ω—Å—ñ–≤)
// // ===============================================================
// router.post("/spin", async (req, res) => {
//   try {
//     const { telegramId } = req.user;

//     const roll = Math.random() * 100; // –†–æ–∑—ñ–≥—Ä–∞—à –≤—ñ–¥ 0 –¥–æ 99.99
//     let reward;

//     // ‚ùóÔ∏è –û–°–¨ –¢–£–¢ –í–ê–®–Ü –ù–û–í–Ü –®–ê–ù–°–ò:

//     // 80% Ticket (–¥—ñ–∞–ø–∞–∑–æ–Ω 0 - 79.99)
//     if (roll < 80) {
//       reward = { type: "raffle_ticket", value: 1 };
//       await db.query(
//         "UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 18% Boost (–¥—ñ–∞–ø–∞–∑–æ–Ω 80 - 97.99)
//     else if (roll < 98) { // (80 + 18 = 98)
//       reward = { type: "boost", value: "x2 Clicks" };
//       await db.query(
//         "UPDATE users SET tap_power = tap_power +2 2 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 1% Stars (–¥—ñ–∞–ø–∞–∑–æ–Ω 98 - 98.99)
//     else if (roll < 99) { // (98 + 1 = 99)
//       reward = { type: "stars", value: 5 };
//       await db.query(
//         "UPDATE users SET balance = balance + 5 WHERE telegram_id = $1",
//         [telegramId]
//       );
//     } 
//     // 1% NFT (–¥—ñ–∞–ø–∞–∑–æ–Ω 99 - 99.99)
//     else {
//       reward = { type: "nft", value: "Mystery Box" };
//       // ... (–ª–æ–≥—ñ–∫–∞ NFT, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
//     }

//     // –ó–∞–ø–∏—Å—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø—ñ–Ω—É
//     await db.query(
//       `INSERT INTO user_spins (user_id, reward_type, reward_value)
//        VALUES ($1, $2, $3)`,
//       [telegramId, reward.type, reward.value.toString()]
//     );

//     // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ tap_power
//     const updatedUser = await db.query(
//       "SELECT balance, tickets, tap_power FROM users WHERE telegram_id = $1",
//       [telegramId]
//     );

//     if (updatedUser.rows.length === 0) {
//       console.error(`User not found with telegramId ${telegramId} after spin`);
//       return res.status(404).json({ success: false, message: "User not found after spin" });
//     }

//     res.json({
//       success: true,
//       result: reward, // 'result' —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–æ–º—É, —â–æ —Å—Ç–∞–ª–æ—Å—è
//       balance: updatedUser.rows[0].balance,
//       tickets: updatedUser.rows[0].tickets,
//       tap_power: updatedUser.rows[0].tap_power,
//     });
//   } catch (err) {
//     console.error("Wheel spin error:", err);
//     res.status(500).json({ success: false, message: "Server error" });
//   }
// });

// module.exports = router;
const express = require("express");
const db = require("../db");
const authMiddleware = require("../middleware/auth");
const axios = require("axios");

const router = express.Router();
router.use(authMiddleware);

// ===============================================================
// üßæ POST /api/wheel/create_invoice
// (–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–¥–∞–ª–µ–Ω–æ 'provider_token')
// ===============================================================
router.post("/create_invoice", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const spinPrice = 10; // 10 XTR

    const botToken = process.env.BOT_TOKEN;

    const response = await axios.post(
      `https://api.telegram.org/bot${botToken}/createInvoiceLink`,
      {
        title: "Wheel of Fortune Spin",
        description: "Spin the wheel for awesome rewards!",
        payload: `wheel_spin_${telegramId}_${Date.now()}`,
        // provider_token: "", // ‚õîÔ∏è –í–ò–î–ê–õ–ï–ù–û! –¶–µ –ø–æ–ª–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –¥–ª—è XTR
        currency: "XTR",
        prices: [{ label: "Spin Cost", amount: spinPrice }],
      }
    );

    if (response.data && response.data.ok && response.data.result) {
      res.json({ success: true, invoice_link: response.data.result });
    } else {
      throw new Error("Failed to get invoice link from Telegram API");
    }
  } catch (err) {
    console.error(
      "Create wheel invoice error:",
      err.response?.data || err.message
    );
    res.status(500).json({ success: false, message: "Failed to create invoice" });
  }
});

// ===============================================================
// üé° POST /api/wheel/spin
// (–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–¥–∞–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è, –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ SQL —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è)
// ===============================================================
router.post("/spin", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const spinCost = 10; // üü¢ –í–∞—Ä—Ç—ñ—Å—Ç—å —Å–ø—ñ–Ω—É –≤ internal_stars

    // üü¢ –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å —ñ —Å–ø–∏—Å—É—î–º–æ 10 –∑—ñ—Ä–æ–∫
    const userCheck = await db.query(
      "SELECT internal_stars FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (!userCheck.rows[0]) {
      return res.status(404).json({ success: false, message: "User not found" });
    }

    const currentStars = parseInt(userCheck.rows[0].internal_stars, 10);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫
    if (currentStars < spinCost) {
      return res.json({ success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫" });
    }

    // –°–ø–∏—Å—É—î–º–æ –∑—ñ—Ä–∫–∏
    await db.query(
      "UPDATE users SET internal_stars = internal_stars - $1 WHERE telegram_id = $2",
      [spinCost, telegramId]
    );

    // üü¢ –ö–†–û–ö 2: –†–æ–∑—ñ–≥—Ä–∞—à –ø—Ä–∏–∑—É
    const roll = Math.random() * 100; // –†–æ–∑—ñ–≥—Ä–∞—à –≤—ñ–¥ 0 –¥–æ 99.99
    let reward;

    // 80% Ticket
    if (roll < 80) {
      reward = { type: "raffle_ticket", value: 1 };
      await db.query(
        "UPDATE users SET tickets = tickets + 1 WHERE telegram_id = $1",
        [telegramId]
      );
    }
    // 18% Boost
    else if (roll < 98) { // (80 + 18 = 98)
      reward = { type: "boost", value: "x2 Clicks" };
      await db.query(
        // ‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–û –°–ò–ù–¢–ê–ö–°–ò–° (–±—É–ª–æ +2 2)
        "UPDATE users SET tap_power = tap_power + 2 WHERE telegram_id = $1",
        [telegramId]
      );
    }
    // 1% Stars
    else if (roll < 99) { // (98 + 1 = 99)
      reward = { type: "stars", value: 5 };
      await db.query(
        // ‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –¥–æ 'internal_stars', –∞ –Ω–µ 'balance'
        "UPDATE users SET internal_stars = internal_stars + 5 WHERE telegram_id = $1",
        [telegramId]
      );
    }
    // 1% NFT
    else {
      reward = { type: "nft", value: "Mystery Box" };
      // ... (–ª–æ–≥—ñ–∫–∞ NFT, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    }

    // üü¢ –ö–†–û–ö 3: –ó–∞–ø–∏—Å—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø—ñ–Ω—É
    await db.query(
      `INSERT INTO user_spins (user_id, reward_type, reward_value)
       VALUES ($1, $2, $3)`,
      [telegramId, reward.type, reward.value.toString()]
    );

    // üü¢ –ö–†–û–ö 4: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ (–≤–∫–ª—é—á–∞—é—á–∏ internal_stars)
    const updatedUser = await db.query(
      // ‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ 'internal_stars'
      "SELECT balance, tickets, tap_power, internal_stars FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (updatedUser.rows.length === 0) {
      console.error(`User not found with telegramId ${telegramId} after spin`);
      return res.status(404).json({ success: false, message: "User not found after spin" });
    }

    res.json({
      success: true,
      result: reward,
      balance: updatedUser.rows[0].balance,
      tickets: updatedUser.rows[0].tickets,
      tap_power: updatedUser.rows[0].tap_power,
      // ‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å,
      // —è–∫–æ–≥–æ –æ—á—ñ–∫—É—î —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      new_internal_stars: updatedUser.rows[0].internal_stars,
    });
  } catch (err) {
    console.error("Wheel spin error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

module.exports = router;