const express = require("express");
const db = require("../db"); // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —à–ª—è—Ö –¥–æ db –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
const authMiddleware = require("../middleware/auth"); // —ñ –¥–æ auth
const axios = require("axios");

const router = express.Router();
router.use(authMiddleware);

// ===============================================================
// üßæ POST /api/wheel/create_invoice ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é –æ–ø–ª–∞—Ç–∏ 10 XTR
// ===============================================================
router.post("/create_invoice", async (req, res) => {
  try {
    const { telegramId } = req.user;

    // ‚ùóÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–û: –¶—ñ–Ω–∞ 10 –∑—ñ—Ä–æ–∫, —è–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    const spinPrice = 1; // 10 —Ä–µ–∞–ª—å–Ω–∏—Ö Telegram Stars (XTR)

    const botToken = process.env.BOT_TOKEN;

    const response = await axios.post(
      `https://api.telegram.org/bot${botToken}/createInvoiceLink`,
      {
        title: "Wheel of Fortune Spin",
        description: "Spin the wheel for awesome rewards!",
        // –†–æ–±–∏–º–æ payload —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
        payload: `wheel_spin_${telegramId}_${Date.now()}`,
        provider_token: "", // –ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ –¥–ª—è XTR
        currency: "XTR", // –í–∞–ª—é—Ç–∞ - Telegram Stars
        prices: [{ label: "Spin Cost", amount: spinPrice }],
      }
    );

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–≤–æ–π—Å
    if (response.data && response.data.ok && response.data.result) {
      res.json({ success: true, invoice_link: response.data.result });
    } else {
      throw new Error("Failed to get invoice link from Telegram API");
    }
  } catch (err) {
    console.error(
      "Create wheel invoice error:",
      err.response?.data || err.message
    );
    res.status(500).json({ success: false, message: "Failed to create invoice" });
  }
});

// ===============================================================
// üé° POST /api/wheel/spin ‚Äî –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ü–Ü–°–õ–Ø —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ XTR
// ===============================================================
router.post("/spin", async (req, res) => {
  try {
    const { telegramId } = req.user;

    // –û–ø–ª–∞—Ç–∞ –≤–∂–µ –≤—ñ–¥–±—É–ª–∞—Å—è —á–µ—Ä–µ–∑ Telegram (XTR).
    // –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ª–∏—à–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—î –ø—Ä–∏–∑.

    // –í–∏–ø–∞–¥–∫–æ–≤–∏–π —à–∞–Ω—Å –¥–ª—è –Ω–∞–≥–æ—Ä–æ–¥–∏
    const roll = Math.random() * 100;
    let reward = { type: "raffle_ticket", value: 1 };

    if (roll >= 98 && roll < 99) {
      reward = { type: "nft", value: "Mystery Box" };
      // –¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è NFT –≤ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é
      // ...
    } else if (roll >= 99) {
      // –Æ–∑–µ—Ä –≤–∏–≥—Ä–∞–≤ 5 *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö* –∑—ñ—Ä–æ–∫
      reward = { type: "stars", value: 5 };
      await db.query(
        "UPDATE users SET stars = stars + 5 WHERE telegram_id = $1",
        [telegramId]
      );
    } else {
      // –Æ–∑–µ—Ä –≤–∏–≥—Ä–∞–≤ 1 –∫–≤–∏—Ç–æ–∫
      await db.query(
        "UPDATE users SET raffle_tickets = raffle_tickets + 1 WHERE telegram_id = $1",
        [telegramId]
      );
    }

    // –ó–∞–ø–∏—Å—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø—ñ–Ω—É
    await db.query(
      `INSERT INTO user_spins (user_id, reward_type, reward_value)
       VALUES ($1, $2, $3)`,
      [telegramId, reward.type, reward.value.toString()]
    );

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π *–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π* –±–∞–ª–∞–Ω—Å
    const updatedUser = await db.query(
      "SELECT stars, raffle_tickets FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    // ‚ùóÔ∏è –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ 500
    if (updatedUser.rows.length === 0) {
      console.error(`User not found with telegramId ${telegramId} after spin`);
      return res.status(404).json({ success: false, message: "User not found after spin" });
    }

    res.json({
      success: true,
      result: reward,
      balance: updatedUser.rows[0].stars, // –±–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑—ñ—Ä–æ–∫
      tickets: updatedUser.rows[0].raffle_tickets,
    });
  } catch (err) {
    console.error("Wheel spin error:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

module.exports = router;