const express = require("express");
const db = require("../db");
const authMiddleware = require("../middleware/auth");
const axios = require("axios");

const router = express.Router();
router.use(authMiddleware);

// ===============================================================
// ü™ô POST /api/withdraw/request ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤—ñ–¥
// ===============================================================
router.post("/request", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const { stars, clicks } = req.body;

    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userResult = await db.query(
      "SELECT username, balance, referrals, clicks FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (userResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    const user = userResult.rows[0];

    // 2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
    if (user.referrals < 5) {
      return res.status(400).json({
        success: false,
        message: "‚ùó –î–ª—è –≤–∏–≤–æ–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤",
      });
    }


    // 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ–∫—ñ–≤
    if (user.clicks < clicks) {
      return res.status(400).json({
        success: false,
        message: "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó",
      });
    }

    // 4Ô∏è‚É£ –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ–∫—ñ–≤
    await db.query(
      "UPDATE users SET clicks = clicks - $1 WHERE telegram_id = $2",
      [clicks, telegramId]
    );

    // 5Ô∏è‚É£ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ withdrawals
    await db.query(
      `INSERT INTO withdrawals (telegram_id, stars, clicks, status)
       VALUES ($1, $2, $3, 'pending')`,
      [telegramId, stars, clicks]
    );

    // 6Ô∏è‚É£ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    const botToken = process.env.BOT_TOKEN;
    const adminChatId = process.env.ADMIN_CHAT_ID;

    if (!botToken || !adminChatId) {
      console.error("BOT_TOKEN –∞–±–æ ADMIN_CHAT_ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —É .env");
    } else {
      const username = user.username ? `@${user.username}` : "‚Äî";

      const message = `
üì¨ *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤—ñ–¥*

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* ${username}
üÜî *Telegram ID:* ${telegramId}
‚≠ê *Stars:* ${stars}
üñ± *–ö–ª—ñ–∫—ñ–≤ —Å–ø–∏—Å–∞–Ω–æ:* ${clicks.toLocaleString()}

–°—Ç–∞—Ç—É—Å: üî∏ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
`;

      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: adminChatId,
        text: message,
        parse_mode: "Markdown",
      });
    }

    res.json({ success: true, message: "‚úÖ –ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è." });
  } catch (err) {
    console.error("Withdraw request error:", err);
    res.status(500).json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏" });
  }
});

module.exports = router;
