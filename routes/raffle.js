// /routes/raffle.js
const express = require("express");
const db = require("../db");
const authMiddleware = require("../middleware/auth");

const router = express.Router();

// üîê –£—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞—Ö–∏—â–µ–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
router.use(authMiddleware);

// ===============================================================
// ‚úÖ GET /api/raffle/:id ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
// ===============================================================
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const raffleResult = await db.query("SELECT * FROM raffles WHERE id = $1", [id]);
    if (raffleResult.rows.length === 0)
      return res.status(404).json({ message: "Raffle not found" });

    const raffle = raffleResult.rows[0];
    const participantsResult = await db.query(
      "SELECT COUNT(*) FROM raffle_participants WHERE raffle_id = $1",
      [id]
    );

    raffle.participants = parseInt(participantsResult.rows[0].count, 10);
    res.json(raffle);
  } catch (err) {
    console.error("‚ùå Error in GET /raffle/:id:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// ===============================================================
// üéüÔ∏è POST /api/raffle/:id/join ‚Äî –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
// ===============================================================
router.post("/:id/join", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const { id } = req.params;

    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userResult = await db.query(
      "SELECT tickets FROM users WHERE telegram_id = $1",
      [telegramId]
    );

    if (userResult.rows.length === 0)
      return res.status(404).json({ message: "User not found" });

    const userTickets = userResult.rows[0].tickets;

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à
    const raffleResult = await db.query("SELECT * FROM raffles WHERE id = $1", [id]);
    if (raffleResult.rows.length === 0)
      return res.status(404).json({ message: "Raffle not found" });

    const raffle = raffleResult.rows[0];

    if (new Date(raffle.ends_at) < new Date())
      return res.status(400).json({ message: "Raffle already ended" });

    // 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å
    const existing = await db.query(
      "SELECT 1 FROM raffle_participants WHERE raffle_id = $1 AND telegram_id = $2",
      [id, telegramId]
    );

    if (existing.rows.length > 0)
      return res.status(400).json({ message: "Already participating" });

    // 4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—ñ–∫–µ—Ç—ñ–≤
    if (userTickets < raffle.cost)
      return res.status(400).json({ message: "Not enough tickets" });

    // 5Ô∏è‚É£ –í—ñ–¥–Ω—è—Ç–∏ —Ç—ñ–∫–µ—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ —É—á–∞—Å—Ç—å
    await db.query("UPDATE users SET tickets = tickets - $1 WHERE telegram_id = $2", [
      raffle.cost,
      telegramId,
    ]);

    await db.query(
      "INSERT INTO raffle_participants (raffle_id, telegram_id) VALUES ($1, $2)",
      [id, telegramId]
    );

    res.json({ message: "Participation confirmed ‚úÖ" });
  } catch (err) {
    console.error("‚ùå Error in POST /raffle/:id/join:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// ===============================================================
// üèÜ POST /api/raffle/:id/end ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à (–∞–¥–º—ñ–Ω –∞–±–æ cron)
// ===============================================================
router.post("/:id/end", async (req, res) => {
  try {
    const { id } = req.params;

    const raffleResult = await db.query("SELECT * FROM raffles WHERE id = $1", [id]);
    if (raffleResult.rows.length === 0)
      return res.status(404).json({ message: "Raffle not found" });

    const raffle = raffleResult.rows[0];
    if (raffle.ended)
      return res.status(400).json({ message: "Raffle already ended" });

    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    const participantsResult = await db.query(
      "SELECT telegram_id FROM raffle_participants WHERE raffle_id = $1",
      [id]
    );
    const participants = participantsResult.rows;

    if (participants.length === 0) {
      await db.query("UPDATE raffles SET ended = true WHERE id = $1", [id]);
      return res.json({ message: "No participants ‚Äî raffle ended with no winner" });
    }

    // 2Ô∏è‚É£ –í–∏–±—Ä–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è
    const winner =
      participants[Math.floor(Math.random() * participants.length)].telegram_id;

    // 3Ô∏è‚É£ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await db.query(
      "UPDATE raffles SET ended = true, winner_id = $1 WHERE id = $2",
      [winner, id]
    );

    res.json({ message: "Raffle ended üéâ", winner });
  } catch (err) {
    console.error("‚ùå Error in POST /raffle/:id/end:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// ===============================================================
// ü™© GET /api/raffle/:id/result ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É
// ===============================================================
router.get("/:id/result", async (req, res) => {
  try {
    const { telegramId } = req.user;
    const { id } = req.params;

    const raffleResult = await db.query("SELECT * FROM raffles WHERE id = $1", [id]);
    if (raffleResult.rows.length === 0)
      return res.status(404).json({ message: "Raffle not found" });

    const raffle = raffleResult.rows[0];
    if (!raffle.ended)
      return res.json({ status: "pending", message: "Raffle still active" });

    const isParticipant = await db.query(
      "SELECT 1 FROM raffle_participants WHERE raffle_id = $1 AND telegram_id = $2",
      [id, telegramId]
    );

    if (isParticipant.rows.length === 0)
      return res.json({ status: "not_participated" });

    const status = raffle.winner_id === telegramId ? "won" : "lost";
    res.json({ status });
  } catch (err) {
    console.error("‚ùå Error in GET /raffle/:id/result:", err);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;
