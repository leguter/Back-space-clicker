import { useState, useEffect } from "react";
import api from "../../utils/api";
import styles from "./DepositPage.module.css";

export default function DepositPage() {
  const [loading, setLoading] = useState(false);
  const [selected, setSelected] = useState(null);
  const [message, setMessage] = useState("");
  const [balance, setBalance] = useState(0);

  const depositOptions = [
    { amount: 1, bonus: 0 },
    { amount: 50, bonus: 0 },
    { amount: 100, bonus: 20 },
    { amount: 500, bonus: 100 },
    { amount: 1000, bonus: 300 },
  ];

  // === –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É ===
  useEffect(() => {
    (async () => {
      try {
        const res = await api.get("/api/user/me");
        if (res.data?.user) {
          setBalance(res.data.user.internal_stars || 0);
        }
      } catch (e) {
        console.error("Load balance error:", e);
      }
    })();
  }, []);

  // === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –æ–ø–ª–∞—Ç–∏ ===
  const handleDeposit = async (amount) => {
    try {
      setLoading(true);
      setSelected(amount);
      setMessage("");

      const res = await api.post("/api/deposit/create_invoice", { amount });

      if (res.data?.success && res.data.invoice_link) {
        if (window.Telegram?.WebApp) {
          // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É —É Telegram WebApp
          window.Telegram.WebApp.openInvoice(res.data.invoice_link);
          setMessage("üí≥ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –æ–ø–ª–∞—Ç—É —É Telegram...");
        } else {
          // fallback –¥–ª—è –≤–µ–±–≤–µ—Ä—Å—ñ—ó
          window.open(res.data.invoice_link, "_blank");
          setMessage("–í—ñ–¥–∫—Ä–∏—Ç–æ —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ ‚úÖ");
        }

        // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–∫–µ–Ω–¥, —á–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞
        const checkPayment = async () => {
          try {
            const userRes = await api.get("/api/user/me");
            if (userRes.data?.user) {
              const newBalance = userRes.data.user.internal_stars || 0;
              if (newBalance > balance) {
                setBalance(newBalance);
                setMessage("üí∞ –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!");
              }
            }
          } catch (err) {
            console.error("Payment verification error:", err);
          }
        };

        // –ü—Ä–æ—Å—Ç–∏–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–≤—à–µ)
        const interval = setInterval(checkPayment, 2000);
        setTimeout(() => clearInterval(interval), 30000); // –∑—É–ø–∏–Ω—è—î–º–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫

      } else {
        setMessage("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–≤–æ–π—Å üòï");
      }
    } catch (err) {
      console.error("Deposit error:", err);
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.Container}>
      <h2 className={styles.Title}>üí∞ Deposit Stars</h2>
      <p className={styles.Subtitle}>–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê</p>

      <div className={styles.ButtonGrid}>
        {depositOptions.map(({ amount, bonus }) => (
          <button
            key={amount}
            className={`${styles.DepositButton} ${selected === amount ? styles.Active : ""}`}
            onClick={() => handleDeposit(amount)}
            disabled={loading}
          >
            <div className={styles.Amount}>{amount} ‚≠ê</div>
            {bonus > 0 && <div className={styles.Bonus}>+{bonus} –±–æ–Ω—É—Å</div>}
          </button>
        ))}
      </div>

      {message && <p className={styles.Message}>{message}</p>}
    </div>
  );
}
